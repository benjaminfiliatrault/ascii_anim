use std::process::Command;
use std::{thread, time};

fn main() {
    let height = 20;
    let width = 103;
    let mut cursor = width.clone();
    let delay = time::Duration::from_millis(500);

    assert!(width % 2 == 1, "Width must be odd thanks");

    let mut ascii: Vec<char> = Vec::with_capacity(height * width);

    for _ in 0..(width * height) {
        ascii.push(' ');
    }

    let mut idx = 0;
    let mut idx_h = 0;
    let mut offset = 0;

    loop {
        if cursor > ascii.len() - 1 {
            cursor = width;
            offset = 0;
        }

        let mut row_string = String::new();
        for _ in 0..height {
            let row = &ascii[offset..cursor];
            for c in row {
                row_string.push(*c);
            }
        }

        println!("{row_string}");

        clear_terminal_screen();

        idx += 1;
        cursor += width;
        offset += width;
    }
}

/// Clear (wipe) the terminal screen
pub fn clear_terminal_screen() {
    let result = if cfg!(target_os = "windows") {
        Command::new("cmd").args(["/c", "cls"]).spawn()
    } else {
        // "clear" or "tput reset"
        Command::new("tput").arg("reset").spawn()
    };

    // Alternative solution:
    if result.is_err() {
        print!("{esc}c", esc = 27 as char);
    }
}
